// Again we define two motors
Motor[A] motorLeft;
Motor[B] motorRight;

// Then we create our sensors.
TouchSensor[1] tSensorTop;
TouchSensor[2] tSensorFront;
UltrasoundSensor[3] uSensorLeft;
UltrasoundSensor[4] uSensorRight;

main
{
    // We synchronize the motors, so they run simultaneously.
    motorLeft synchronize motorRight;

    // We define numbers for speeds of the motor.
    number speed = 75;
    number backSpeed = 20;
    number turningSpeed = 35;

    // We then define a bool that is used to run the program.
    bool isRunning = false;

    // We use the bool as a condition in a while-loop to wait for the tSensorTop to be pressed.
    while(not(isRunning)) do
    {
        // We check for the tSensorTop to be pressed, then we set the isRunning to true.
        if(tSensorTop.IsPressed) then
        {
            isRunning = true;
        }

        // We introduce a 100 ms sleep to keep the robot from overworking.
        Sleep(100);
    }

    // We now start the motors in a while-loop.
    while(isRunning) do
    {
        motorLeft.Forward(speed);

        // We check if the tSensorFront is pressed and then stop the motors.
        if(tSensorFront.IsPressed) then
        {
            motorLeft.Stop();

            // We then back up the robot for two seconds, to make room for turning.
            motorLeft.BackwardsSeconds(backSpeed, 2);

            // Then we check which side is the best direction and turn in that respective direction.
            if(uSensorLeft.Distance greaterThan uSensorRight.Distance) then
            {
                TurnLeft(motorLeft, motorRight, turningSpeed);
            }
            else if(uSensorLeft.Distance lessThan uSensorRight.Distance) then
            {
                TurnRight(motorLeft, motorRight, turningSpeed);
            }
            else
            {
                TurnLeft(motorLeft, motorRight, turningSpeed);
            }

            // We then introduce a 2 second window where the robot can be turned of.
            // We do this with a for-loop since we to check tSensorTop in this window.
            // But we cant just use a 2 second sleep since we can risk skipping the press that way.
            for(1 to 20) do
            {
                if(tSensorTop.IsPressed) then
                {
                    isRunning = false;
                }

                // We again use the sleep, but this time it is also used as a timer.
                Sleep(100);
            }
        }
    }
}

// We define a methods for tuning left.
void Method TurnLeft(number speed)
{
    // We now have to desynchronize and then synchronize the motors again so that we can use them to turn.
    motorLeft Desynchronize motorRight;
    motorLeft Synchronize motorRight -100;

    // Here we make the robot turn. We use a hardcoded value for turning here since it depends.
    // On the relative speed of the motors when we use the ForwardSeconds method.
    motorLeft.BackwardsSeconds(speed, 3) // We assume that it takes the robot 3 seconds to turn at this speed.
}

// And one for turning right.
void Method TurnRight(number speed)
{
    // Just as the other method desynchronize and then synchronize the motors again so that we can use them to turn.
    motorLeft desynchronize motorRight;
    motorLeft synchronize motorRight -100;

    motorLeft.ForwardSeconds(speed, 3);
}